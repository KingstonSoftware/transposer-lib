{"version":3,"sources":["../src/Transposer.js"],"names":["escapeRegExp","s","replace","Transposer","constructor","noteRegex","data","notes","flat","map","sort","a","b","length","join","adornmentRegex","adornments","regex","chordRegex","RegExp","spaceRegex","parse","song","extractChords","chords","m","exec","push","offset","index","name","toString","lines","progression","split","forEach","line","parts","slice","chord","progressionIndex","offsetAfterChord","undefined","type","lastLine","lastLineLength","reduce","sum","part","padEnd","Math","max","beginIndex","endIndex","partIndex","simplifyKey","keyName","keys","find","key","minor","substring","originalKey","_guessKey","otherProgessions","stringify","newProgression","newLines","newChord","oldChord","delta","padStart","lineIndex","trimEnd","transpose","newKey","oldKeyScale","scales","newKeyScale","normalizeMap","match","indexOf","chordRootArray","accidentals","chordRoot","includes","likelyKey","likelyKeys","firstChord","lastChord","firstLast","VI","iiVI","IVI","IVIV","Vvi","viIV","iiivi","VIByScale","iiVIByScale","IVVIByScale","IVIByScale","IVIVByScale","VviByScale","IVByScale","viIVByScale","iiiviByScale","scale","currentScale","fiveOneHits","iiVIHits","IVVIHits","IVIHits","IVIVHits","VviHits","IVHits","viIVHits","iiiviHits","previousChord","currentChord","nextChord","Object","IVVI","likelyKeyArray","criteria","sortedArray","filter","v","reverse","k","IV","likelyKeyMinor","keyCount","minorKeyCount"],"mappings":"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","sourcesContent":["import * as data from \"./data\"\n\nconst escapeRegExp = (s) => s.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, \"\\\\$&\") // $& means the whole matched string\n\nexport class Transposer {\n  constructor() {\n    const noteRegex = data.notes\n      .flat()\n      .map(escapeRegExp)\n      .sort((a, b) => a.length - b.length)\n      .join(\"|\")\n    const adornmentRegex = data.adornments\n      .flat()\n      .map(escapeRegExp)\n      .sort((a, b) => a.length - b.length)\n      .join(\"|\")\n    const regex =\n      \"(?!A [a-z])(?<=^| |\\\\t)(?:\" +\n      noteRegex +\n      \")(?:\" +\n      adornmentRegex +\n      \")?(?= |\\\\t|$)\"\n\n    this.chordRegex = new RegExp(regex, \"g\")\n    this.spaceRegex = new RegExp(\"^[ \\t\\n]*$\")\n  }\n\n  static keys = data.keys\n\n  /*\n  Parse a song with chords generating:\n\n  - The lines of the song\n  - The entire chord progression for the song\n  - The unique chords used in the song\n  - Guessing the key the song is in\n\n  Songs should be displayed in a fix pitch font.\n\n  We parse 4 types of song lines:\n\n  chords  | lines mixed chords and text\n  lyrics  | lines with only text and chords above\n  other   | lines with no chords\n  */\n  parse(song) {\n    const extractChords = (s) => {\n      const chords = []\n      let m\n\n      while ((m = this.chordRegex.exec(s)) !== null) {\n        chords.push({ offset: m.index, name: m.toString() })\n      }\n\n      return chords\n    }\n    const lines = []\n    const progression = []\n\n    song.split(/\\r?\\n/gm).forEach((line) => {\n      const chords = extractChords(line)\n\n      if (chords.length > 0) {\n        const parts = []\n\n        if (chords[0].offset > 0) {\n          parts.push([null, line.slice(0, chords[0].offset)])\n        }\n\n        chords.forEach((chord, index) => {\n          progression.push(chord.name)\n\n          const progressionIndex = progression.length - 1\n          const offsetAfterChord = chord.offset + chord.name.length\n\n          parts.push([\n            progressionIndex,\n            line.slice(\n              offsetAfterChord,\n              index === chords.length - 1 ? undefined : chords[index + 1].offset\n            ),\n          ])\n        })\n\n        lines.push({ type: \"chords\", parts })\n        return\n      }\n\n      const lastLine = lines.length > 0 ? lines[lines.length - 1] : null\n\n      if (lastLine && lastLine.type === \"chords\") {\n        const lastLineLength = lastLine.parts.reduce(\n          (sum, part) =>\n            sum +\n            (part[0] !== null ? progression[part[0]].length : 0) +\n            part[1].length,\n          0\n        )\n\n        line = line.padEnd(Math.max(line.length, lastLineLength))\n\n        const parts = []\n        let beginIndex = 0\n        let endIndex = 0\n\n        // Chop line up into same number of parts as the chords array in the last line\n        lastLine.parts.forEach((part, partIndex) => {\n          if (partIndex === lastLine.parts.length - 1) {\n            parts.push(line.slice(beginIndex))\n          } else {\n            if (part[0] !== null) {\n              endIndex += progression[part[0]].length\n            }\n\n            endIndex += part[1].length\n            parts.push(line.slice(beginIndex, endIndex))\n            beginIndex = endIndex\n          }\n        })\n\n        lines.push({ type: \"lyrics\", parts })\n        return\n      }\n\n      lines.push({ type: \"other\", parts: [line] })\n    })\n\n    this.lines = lines\n    this.progression = progression\n\n    const simplifyKey = (keyName) =>\n      // the guessed key could be e.g. A, Am, or Abm, but we're not processing minor keys so we just want the root of the chord\n      keyName.length === 1\n        ? keyName\n        : keyName.length === 2 && keyName[1] === \"m\"\n        ? data.keys.find((key) => key.minor === keyName).key || keyName[0]\n        : keyName.substring(0, 2)\n\n    this.originalKey = simplifyKey(this._guessKey())\n    this.otherProgessions = {}\n  }\n\n  stringify(newProgression) {\n    newProgression = newProgression ?? this.progression\n\n    let newLines = this.lines.map((line) =>\n      line.type === \"other\"\n        ? line.parts[0]\n        : line.type === \"chords\"\n        ? {\n            type: \"chords\",\n            parts: line.parts.map((part) => {\n              if (part[0] === null) {\n                return part[1]\n              }\n\n              const newChord = newProgression[part[0]]\n              const oldChord = this.progression[part[0]]\n              const delta = newChord.length - oldChord.length\n              let s = part[1]\n\n              if (delta > 0) {\n                // Leave at least one space between chords\n                if (s.length > 1) {\n                  s = s.substring(delta)\n                } else {\n                  s = s.padStart(delta + s.length - 1)\n                }\n              } else if (delta < 0) {\n                s = s.padStart(s.length - delta)\n              }\n\n              return newChord + s\n            }),\n          }\n        : line\n    )\n\n    newLines = newLines.map((line, lineIndex) =>\n      line.type === \"lyrics\"\n        ? line.parts\n            .map((part, partIndex) =>\n              part.padEnd(\n                Math.max(\n                  part.length,\n                  newLines[lineIndex - 1].parts[partIndex].length\n                )\n              )\n            )\n            .join(\"\")\n            .trimEnd()\n        : line\n    )\n\n    newLines = newLines\n      .map((line) =>\n        line.type === \"chords\" ? line.parts.join(\"\").trimEnd() : line\n      )\n      .join(\"\\n\")\n\n    return newLines\n  }\n\n  transpose(newKey) {\n    let oldKeyScale = data.scales[this.key + \"Scale\"]\n    let newKeyScale = data.scales[newKey + \"Scale\"]\n\n    if (!oldKeyScale) {\n      oldKeyScale = data.scales[`${data.normalizeMap[key]}Scale`]\n    }\n\n    const newProgression = progression.map((chord) =>\n      chord.replace(\n        /(([CDEFGAB]#\\*)|([CDEFGAB]#)|([CDEFGAB]b+)|([CDEFGAB]\\**))/g,\n        (match) => newKeyScale[oldKeyScale.indexOf(match)]\n      )\n    )\n\n    return newProgression\n  }\n\n  _guessKey() {\n    // before anything, process away everything that is not the root of the chord for root analysis\n    const chordRootArray = this.progression.map((chord) => {\n      const accidentals = [\"#\", \"b\", \"*\", \"bb\", \"bbb\"]\n      let chordRoot = \"\"\n\n      if (chord.length > 1) {\n        if (chord.substring(1, 3) === \"bb\") {\n          chordRoot = chord.substring(0, 3)\n        } else {\n          if (chord.substring(1, 4) === \"bbb\") {\n            chordRoot = chord.substring(0, 4)\n          }\n\n          if (!accidentals.includes(chord[1])) {\n            chordRoot = chord[0]\n          } else {\n            chordRoot = chord.substring(0, 2)\n          }\n        }\n      } else {\n        chordRoot = chord[0]\n      }\n      return chordRoot\n    })\n\n    let likelyKey = \"\"\n    let likelyKeys = {\n      firstChord: chordRootArray[0],\n      lastChord: chordRootArray[chordRootArray.length - 1],\n      firstLast: null,\n      VI: null,\n      iiVI: null,\n      IVI: null,\n      IVIV: null,\n      Vvi: null,\n      viIV: null,\n      iiivi: null,\n    }\n\n    // also in preprocessing, clean the chords of anything that's not a qualifier if you want to do circle of 5 analysis\n    // first, check if first and last chord are the same. High likelihood this is the key\n    if (chordRootArray[0] === chordRootArray[chordRootArray.length - 1]) {\n      likelyKeys.firstLast = chordRootArray[0]\n    }\n\n    // next, look for V-I... for all keys\n    let VIByScale = {}\n    let iiVIByScale = {}\n    let IVVIByScale = {}\n    let IVIByScale = {}\n    let IVIVByScale = {}\n    let VviByScale = {}\n    let IVByScale = {}\n    let viIVByScale = {}\n    let iiiviByScale = {}\n\n    for (const scale in data.scales) {\n      const currentScale = data.scales[scale]\n      // for each scale\n      let fiveOneHits = 0\n      let iiVIHits = 0\n      let IVVIHits = 0\n      let IVIHits = 0\n      let IVIVHits = 0\n      let VviHits = 0\n      let IVHits = 0\n      let viIVHits = 0\n      let iiiviHits = 0\n      chordRootArray.forEach((chord, index) => {\n        if (index === chordRootArray.length - 1) {\n          // last chord\n          return\n        }\n\n        // look at each set of 2 chords\n        const previousChord = index === 0 ? null : chordRootArray[index - 1]\n        const currentChord = chord\n        const nextChord = chordRootArray[index + 1]\n        if (currentScale[4] === currentChord && currentScale[0] === nextChord) {\n          // it is a V-I in this key\n          fiveOneHits++\n\n          if (previousChord) {\n            // check for ii-V-I\n            if (previousChord === currentScale[1]) {\n              iiVIHits++\n            }\n            if (previousChord === currentScale[3]) {\n              IVVIHits++\n            }\n          }\n        }\n        // check IV-I\n        if (currentScale[3] === currentChord && currentScale[0] === nextChord) {\n          IVIHits++\n          if (chordRootArray[index + 2]) {\n            if (currentScale[4] === chordRootArray[index + 2]) {\n              IVIVHits++\n            }\n          }\n        }\n        // check V - vi\n        if (currentScale[4] === currentChord && currentScale[5] === nextChord) {\n          VviHits++\n        }\n        // check I-V\n        if (currentScale[0] === currentChord && currentScale[4] === nextChord) {\n          IVHits++\n        }\n        // check vi-IV\n        if (currentScale[5] === currentChord && currentScale[3] === nextChord) {\n          viIVHits++\n        }\n        // check iii-vi\n        if (currentScale[2] === currentChord && currentScale[5] === nextChord) {\n          iiiviHits++\n        }\n      })\n      VIByScale[scale] = fiveOneHits\n      iiVIByScale[scale] = iiVIHits\n      IVVIByScale[scale] = IVVIHits\n      IVIByScale[scale] = IVIHits\n      IVIVByScale[scale] = IVIVHits\n      VviByScale[scale] = VviHits\n      IVByScale[scale] = IVHits\n      viIVByScale[scale] = viIVHits\n      iiiviByScale[scale] = iiiviHits\n    }\n\n    likelyKeys.VI = Object.keys(VIByScale)\n      .reduce((a, b) => (VIByScale[a] > VIByScale[b] ? a : b))\n      .replace(\"Scale\", \"\")\n\n    if (likelyKeys.VI === \"test\") {\n      likelyKeys.VI = null\n    }\n    likelyKeys.iiVI = Object.keys(iiVIByScale)\n      .reduce((a, b) => (iiVIByScale[a] > iiVIByScale[b] ? a : b))\n      .replace(\"Scale\", \"\")\n\n    if (likelyKeys.iiVI === \"test\") {\n      likelyKeys.iiVI = null\n    }\n    likelyKeys.IVI = Object.keys(IVIByScale)\n      .reduce((a, b) => (IVIByScale[a] > IVIByScale[b] ? a : b))\n      .replace(\"Scale\", \"\")\n\n    if (likelyKeys.IVI === \"test\") {\n      likelyKeys.IVI = null\n    }\n    likelyKeys.IVIV = Object.keys(IVIVByScale)\n      .reduce((a, b) => (IVIVByScale[a] > IVIVByScale[b] ? a : b))\n      .replace(\"Scale\", \"\")\n\n    if (likelyKeys.IVIV === \"test\") {\n      likelyKeys.IVIV = null\n    }\n    likelyKeys.Vvi = Object.keys(VviByScale)\n      .reduce((a, b) => (VviByScale[a] > VviByScale[b] ? a : b))\n      .replace(\"Scale\", \"\")\n\n    if (likelyKeys.Vvi === \"test\") {\n      likelyKeys.Vvi = null\n    }\n\n    likelyKeys.IVVI = Object.keys(IVVIByScale)\n      .reduce((a, b) => (IVVIByScale[a] > IVVIByScale[b] ? a : b))\n      .replace(\"Scale\", \"\")\n\n    if (likelyKeys.IVVI === \"test\") {\n      likelyKeys.IVVI = null\n    }\n\n    likelyKeys.viIV = Object.keys(viIVByScale)\n      .reduce((a, b) => (viIVByScale[a] > viIVByScale[b] ? a : b))\n      .replace(\"Scale\", \"\")\n\n    if (likelyKeys.viIV === \"test\") {\n      likelyKeys.viIV = null\n    }\n\n    likelyKeys.iiivi = Object.keys(iiiviByScale)\n      .reduce((a, b) => (iiiviByScale[a] > iiiviByScale[b] ? a : b))\n      .replace(\"Scale\", \"\")\n\n    if (likelyKeys.iiivi === \"test\") {\n      likelyKeys.iiivi = null\n    }\n\n    // if firstLast and VI are the same key, we definitely have a winner\n    if (\n      likelyKeys.firstLast !== null &&\n      likelyKeys.firstLast === likelyKeys.VI\n    ) {\n      likelyKey = likelyKeys.firstLast\n    } else {\n      // check all the likelyKeys and see which appears most frequently\n      const likelyKeyArray = Object.keys(likelyKeys).map((criteria) => {\n        return likelyKeys[criteria]\n      })\n\n      let sortedArray = likelyKeyArray\n        .sort(\n          (a, b) =>\n            likelyKeyArray.filter((v) => v === a).length -\n            likelyKeyArray.filter((v) => v === b).length\n        )\n        .reverse()\n      likelyKey = sortedArray.find((k) => {\n        return k !== null\n      })\n    }\n\n    // if there are no standard chord movements to check, we should default to the first chord I think\n    if (\n      !likelyKeys.VI &&\n      !likelyKeys.iiVI &&\n      !likelyKeys.IVVI &&\n      !likelyKeys.IVI &&\n      !likelyKeys.Vvi &&\n      !likelyKeys.IV &&\n      !likelyKeys.viIV &&\n      !likelyKeys.iiivi\n    ) {\n      likelyKey = likelyKeys.firstChord\n    }\n\n    // finally, check if likely key in minor or major form appears more frequently\n    // as this solution develops, this is less and less likely, as the relative major will be\n    // returned more often than not (which is great, as far as i'm concerned)\n    const likelyKeyMinor = `${likelyKey}m`\n    const keyCount = this.progression.filter((chord) => {\n      return (\n        chord.substring(0, likelyKey.length) === likelyKey &&\n        chord.substring(likelyKey.length, likelyKey.length + 1) !== \"m\"\n      )\n    })\n    const minorKeyCount = this.progression.filter((chord) => {\n      return (\n        chord.substring(0, likelyKeyMinor.length) === likelyKeyMinor &&\n        chord.substring(likelyKey.length, 4) !== \"maj\"\n      )\n    })\n\n    return keyCount.length >= minorKeyCount.length\n      ? likelyKey\n      : data.keys.find((k) => {\n          return k.minor === likelyKeyMinor\n        })?.key || likelyKey\n  }\n}\n"],"file":"Transposer.js"}